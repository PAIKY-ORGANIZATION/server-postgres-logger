name: AWS git fetch
on:
  push:
    branches: ['master']

jobs:
  run_in_EC2:
    runs-on: ubuntu-latest
    #environment: Test_Paiky_Environment #$ Optionally, create  a github environment to avoid duplicating secrets across repositories.
    steps:
      # - name: ENV TEST
      #   run: echo "$REPO_PATH" && echo "$REPO_NAME"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{vars.PAID_CLOUD_HOST}}
          username: ${{secrets.HETZNER_USER}} #* Currently hosted on Hetzner. 
          key: ${{secrets.HETZNER_SSH_PRIVATE_KEY}}
          passphrase: ${{ secrets.PRIVATE_KEY_PASSPHRASE }} #$ Only if required.

          script: |
            UNIQUE_APP_NAME="${{ vars.UNIQUE_APP_NAME }}"  #! UNIQUE_APP_NAME must be all lowercase and without underscores for Docker to accept it.
            #! UNIQUE_APP_NAME must be set per-repository
            #! If you are using Docker COMPOSE,  you don't need a unique app name for the image name. However, you still need a unique directory name.
            REPO_PATH="${{ github.repository }}"  #$ Example: # gives "dev-miguel/repo-name". We will use this to clone the repo initially. 

            cd ~/vsCodeMain
            #* If the is no desired-folder with .git, it means the repo doesn't exist so we clone it INTO A DESIRED FOLDER NAME.
            [ -d "$UNIQUE_APP_NAME/.git" ] || git clone git@github.com:$REPO_PATH.git "$UNIQUE_APP_NAME" #! AWS needs  need to use an SSH key of your github account that DOESN'T USE A PASSPHRASE in order to clone.
            cd "$UNIQUE_APP_NAME" 
            git fetch origin 
            git merge origin/master

            rm ./prisma/.env #! Remove for safety.
            echo "DATABASE_URL=${{secrets.DATABASE_URL}}" >> ./prisma/.env #* this will contain the full TCP/IP URL for Prisma to connect to the RDS database.

            sudo docker compose down
            sudo docker compose up --build -d #$ Specify services to avoid running tests again.